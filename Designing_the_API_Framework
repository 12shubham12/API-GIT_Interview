1. Create a Maven Project
2. Import all the relevant dependencies
<dependency>
      <groupId>org.testng</groupId>
      <artifactId>testng</artifactId>
      <version>7.7.1</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <version>5.3.0</version>
      <scope>test</scope>
    </dependency>


    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>json-path</artifactId>
      <version>5.3.0</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.json</groupId>
      <artifactId>json</artifactId>
      <version>20230227</version>
    </dependency>

    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-all</artifactId>
      <version>1.3</version>
      <scope>test</scope>
    </dependency>

Note:
Hamcrest is a library used in API automation to create more readable assertions
eg: assertThat(response.getStatusCode(), equalTo(200));
assertThat(response.jsonPath().getString("fieldName"), equalTo("expectedFiledValue"));

3. Create below folders inside the project
-Config(it will have config.properties file)
-ResponseFiles(to have the response API)
-TestData(having Data.xlsx sheet to read data from excel)
-Screenshots(to have the SS of failure Response)

4. Inside src/main/java -> create one package "resources" which will have the input json file in .json
5.Inside src/test/java ->create 2 packages
- utility (it will have 7 classes, BaseClass, ConfigDataProvider, ExcelDataProvider and Helper, EndPointURLs
and AuthUtils, OAuthUtils)
- testcases (will have the individual level test classes like, createSA, createBA etc and a combined test class)

5. Inside EndPointURLs class, provide the Endpoint urls for ST, SIT, UAT, PreProd

6. Inside Config folder, create config.properties file

7. In BaseClass, we initialize config and excel data provider class. Also, we have code for JDBC connection.

8. In testcases package, we create different classes for different APIs like createBA, getAccountInfo etc
Also, we will have MainTest class, where we will have @Test methods which will call methods created in above class
respectively.
Eg:
Refer SimpleGetRequest class, where we have method that will execute get API, this method is called main test class
which is "AllTestTogether" inside @Test and method name is testBasicGet()

NOTE:
//asPrettyString() method is used to print the response in actual json format which is more readable.
//.prettyPrint() method is used to print the response in actual json format which is more readable in console

9. In AuthUtils Class, create a method to generate the Auth token (Bearer token) which can be used for
Authorization in GET and POST Request.

10. Refer class Get_SunRiseAndSunSet_UsingBearerToken and AuthUtils (best way to automate)
and that method I have used in AllTestTogether

11. Similarly for OAuthUtils and Get_SunRiseAndSunSet_UsingOAuthToken

----------------------------------------Response Validation-------------------------------------------
1. Schema Validation (Validate entire structure of a JSON response using JSON schema)
2. Using JSONPath - Validate Simple and Nested JSON objects and arrays
------------------------------------------------------------------------------------------------------
Schema Validation:
a. Add json schema validator dependency in pom.xml
<dependency>
    <groupId>io.rest-assured</groupId>
    <artifactId>json-schema-validator</artifactId>
    <version>5.4.0</version>
</dependency>

b. Create Json schema (say SunSchema.json) under src/main/java/resources/schemas

Validating a single value in Response body:
Assert.assertEquals(response.jsonPath().getString("status"), "OK");
Assert.assertEquals(response.jsonPath().getString("accountNumber"), "BA23456");

Validate Nested JSON objects and arrays:
Assert.assertEquals(response.jsonPath().getString("results.sunrise"), "5:21:48 AM");

--------------------------------------------POST Request--------------------------------------------------------
There are two ways to send the POST Request:
1. Using Request Json input file
2. Using Objects (i.e serialization and de-serialization)


----------------------------------------------------------------------------------------------------------------
POST Request - Using Json Input file
1. Create a json input file (addObject.json) -> add the payload
2. In config.properties file, provide the path for the input json file.
4.Create a method (read_Json_File) inside a Helper Class, that will read the json file (request payload as string)
5. In POST, since we will be reading path from config(using method , then we have to write code in ConfigDataProvider Class
to read data from config.properties file(i.e input json file path)
6. Now create a Class(AddObject_POST) that will have the method to fire the post request that will
execute POST API, this method is called in main test class
which is "AllTestTogether" inside @Test and method name is testBasicPost_CreateProfile()
7. We have passed hardcode value in the input json, but now we will be sending these values from excel
8. Modify the (addObject.json) file and put the variable name in place of value
9. Create ExcelDataProvider class.
10. Go to Helper class, and create a method(say addObj_helper) to read the json file.
11. In above method, we will pass the path of the json file using the method created in ConfigDataProvider class,
i.e


----------------------------------------------------------------------------------------------------------------
Validation of Request Header and Token


----------------------------------------------------------------------------------------------------------------
Validation of Response Header and Token

//Validating the Response Header
        String response_ContentType = response.getHeader("Content-Type");
        Assert.assertEquals(response_ContentType,"application/json");
        String response_Cookie = response.getCookie("session");
        Assert.assertEquals(response_Cookies,null);
        Headers headers = response.getHeaders();
        System.out.println(headers);
        String authToken = response.getHeader("Authorization");
        Assert.assertTrue(authToken, expected);

----------------------------------------------------------

----------------------------------------------------------------------------------------------------------------
All Git commands:
1. git init
- open intellij and go to a new folder where we want to create local workspace. From terminal type: git init
2. git remote add origin https://github.com/12shubham12/API-GIT_Interview.git
3. git pull origin master
4. git add . or git add filename
5. git commit -m "commit message"
6. git push origin master

Adding a new branch to local
git branch branch_name

Switch to branch
git checkout branch_name

Git merge:
git merge branch_name
----------------------------------------------------------------------------------------------------------------
git fetch and/vs git pull
git fetch:
git fetch origin master
git fetch will download the latest changes from remote to our local repository.
It allows us to review and manually merge the changes
No changes to our working directory and staging area.

git pull:
git pull will download the latest changes from remote to our local repository and automatically merge the changes
to our working directory
It doesn't allows us to review the changes and due to which it can cause merge conflict
git pull = git fetch + git merge

----------------------------------------------------------------------------------------------------------------
git stash
To temporary save the changes (both current and unstaged) made to the project, it we want to switch to a
different branch in between for some other work without having to commit unfinished work.
Command:
git stash save "my message"

To View Stashed changes
git stash list

Apply stashed changes(apply the most recent stash entry yo working directory without removing from stash list):
git stash apply

In case of multiple stashes - To retrieve or to apply a specific stash
git stash apply stash@{2}

To apply most recent stash entry to working directory and remove it from stash list
git stash pop
for specific stash
git stash pop stash@{2}

Extra:
git stash clear -> remove all the stash entries
git stash drop -> remove the most recent stash entry
git stash drop stash@{2} -> remove a specific stash entry

----------------------------------------------------------------------------------------------------------------
Merge Conflict Scenario
1. Create a testing branch from master branch (git branch branch_name)
2. Checkout to the test branch (git checkout branch_name)
3. git pull origin master
4. Try some changes in the same file, where let suppose another tester has changed something in same file
and his code is pushed to the master.
5. Go to master branch
6. git pull origin master
7. From master branch, do a git merge (git merge branch_name)
6.We will get merge conflict
7. Open the file, resolve it
8. git add filename
9. git commit -m "message"
10. git push origin master


--------------------------------------Serialisation and De-serialisation--------------------------------------
Add below dependency in pom.xml
<dependency>
    <groupId>com.fasterxml.jackson.core</groupId>
    <artifactId>jackson-databind</artifactId>
    <version>2.17.2</version>
</dependency>


Create a POJO(Plain Old Java Object) for JSON Mapping
1. Create a class (say CreateBA) inside the utility package
2. Create a utility class for Serialisation (say JsonUtils) inside utility package
3. Now come to src/test/java/testcases folder and create a class(eg CreateBA_POST)

--------------------------------------Allure---------------------------------------------------------------
Allure Report:
For Allure Report , just download the below dependency and add below commands in @Test in AllTestTogether class
<dependency>
      <groupId>io.qameta.allure</groupId>
      <artifactId>allure-testng</artifactId>
      <version>2.27.0</version>
</dependency>

//Attach Response body to the Allure report
Allure.addAttachment("API Response", "application/json", response.getBody().asPrettyString(), "json");

// Attach API response logs
Allure.addAttachment("API Response Logs", "text/plain", response.getBody().asPrettyString(), "txt");

------------------------------------------Jenkins--------------------------------------------------------
1. Install below dependency
<dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.30</version>
      <scope>provided</scope>
</dependency>

2. Go to Jenkins and create a Job (Refer Maven project API_GIT_Live from Jenkins)
